{
#include<bits/stdc++.h>
using namespace std;
struct et
{
	char value;
	et* left, *right;
};
bool isOperator(char c)
{
	if (c == '+' || c == '-' ||
			c == '*' || c == '/' ||
			c == '^')
		return true;
	return false;
}
void inorder(et *t)
{
	if(t)
	{
		inorder(t->left);
		printf("%c ", t->value);
		inorder(t->right);
	}
}
et* newNode(int v)
{
	et *temp = new et;
	temp->left = temp->right = NULL;
	temp->value = v;
	return temp;
};
et* constructTree(char []);
int main()
{   
    int t;
    cin>>t;
    while(t--){
    char postfix[25];
	cin>>postfix;
	et* r = constructTree(postfix);
	inorder(r);
	cout<<endl;
}
return 0;
}
}
/*This is a function problem.You only need to complete the function given below*/
/*struct et
{
	char value;
	et* left, *right;
};*/
//----------------------------------------------------------------------------------------------------------------------
//======================--------------   FUNCTION CREATED BY ME   -----------------=====================
//function to construct expression tree
et* create(char ch)
{
    et* temp=new et;
    temp->value=ch;
    temp->left=NULL;
    temp->right=NULL;
    
    return temp;
}

bool operand(char ch)
{
    return((ch>='a' && ch<='z')||(ch>='A' && ch<='Z'));
}

et* constructTree(char postfix[])
{
    stack<et*>node;
    int l=strlen(postfix),i;
    
    for(i=0;i<l;i++)
    {   // when it is a operand
        if(operand(postfix[i]))
        {
            et* temp=create(postfix[i]);
            node.push(temp);
        }
        else{// when it is a operator  
              //pop last two elements of stack make them child 
              //and insert a node
            et* temp=create(postfix[i]);
            temp->right=node.top();  node.pop();
            temp->left=node.top();   node.pop();
            node.push(temp);
        }
    }
    return (node.top());
}
